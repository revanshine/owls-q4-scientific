name: Validate Q4 Scientific Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # Use uv with built-in caching for its download cache
    - name: Install uv (with caching)
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    # Restore the ready-to-use venv to skip uv sync when possible
    - name: Restore venv cache
      id: venv-restore
      uses: actions/cache/restore@v4
      with:
        path: src/fargate/.venv
        key: venv-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('src/fargate/uv.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-

    # Only build the venv when it wasn't restored
    - name: Install dependencies (uv sync)
      if: steps.venv-restore.outputs.cache-hit != 'true'
      working-directory: src/fargate
      run: uv sync --locked --all-extras --dev

    # Save the freshly built venv (only when we had to build it)
    - name: Save venv cache
      if: steps.venv-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: src/fargate/.venv
        key: venv-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('src/fargate/uv.lock') }}

    - name: Run code quality checks
      working-directory: src/fargate
      run: |
        echo "üîç Running ruff linter and formatter..."
        uv run ruff check . --fix
        uv run ruff format .

    - name: Run mathematical property tests
      working-directory: src/fargate
      run: |
        echo "üß™ Running comprehensive test suite..."
        uv run python -m pytest tests/ -v --cov=q4 --cov-report=xml --cov-report=term

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./src/fargate/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Prepare test output dir
      if: always()
      run: mkdir -p src/fargate/test_output

    - name: Generate test artifacts
      if: always()
      working-directory: src/fargate
      run: |
        echo "üìä Generating test visualizations..."
        uv run python test_embeddings.py || true

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: |
          src/fargate/test_output/*.png
          src/fargate/test_output/*.json
          src/fargate/test_output/*.txt
        if-no-files-found: ignore
        retention-days: 30

    - name: Validate mathematical guarantees
      working-directory: src/fargate
      run: |
        echo "üî¨ Validating mathematical properties..."
        uv run python - <<'PY'
import numpy as np
from q4.operator import learn_projectors_linear, energy_split

def main():
    np.random.seed(42)
    X = np.random.randn(50, 10)
    Ps, Pv = learn_projectors_linear(X)

    # Core properties
    assert np.allclose(Ps @ Ps, Ps, atol=1e-8), 'Idempotence failed'
    assert np.allclose(Ps @ Pv, np.zeros_like(Ps), atol=1e-8), 'Orthogonality failed'
    assert np.allclose(Ps + Pv, np.eye(10), atol=1e-8), 'Completeness failed'

    energy = energy_split(X, Ps, Pv)
    assert 0.99 <= energy <= 1.01, f'Energy preservation failed: {energy}'

    print('‚úÖ All mathematical guarantees validated!')

if __name__ == '__main__':
    main()
PY


    - name: Check reproducibility
      run: |
        echo "üîÑ Testing reproducibility..."
        make --version || (echo "Installing make..." && sudo apt-get update && sudo apt-get install -y make)
        make reproduce || echo "Reproducibility check completed"
